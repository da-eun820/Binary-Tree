#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define MAX_ELEMENT 100

// 히프에 대한 1차원 배열과 히프 원소의 개수를 구조체로 묶어서 선언
typedef struct {
	int heap[MAX_ELEMENT];
	int heap_size;
}heapType;

// 공백 히프를 생성
heapType* createHeap() {
	heapType* h = (heapType*)malloc(sizeof(heapType));
	h->heap_size = 0;
	return h;
}

// 히프에 item을 삽입하는 연산
void insertHeap(heapType* h, int item) {
	int i;
	h->heap_size = h->heap_size + 1;
	i = h->heap_size;
	while ((i != 1) && (item > h->heap[i / 2])) {
		h->heap[i] = h->heap[i / 2];		// 새로 만든/삽입할 자리에 부모 노드를 저장
		i /= 2;
	}
	h->heap[i] = item;
}

// 히프의 루트를 삭제하여 반환하는 연산
int deleteHeap(heapType* h) {
	int parent, child;
	int item, temp;
	item = h->heap[1];		// 히프에서 삭제 연산은 언제나 루트 노드를 반환
	temp = h->heap[h->heap_size];
	h->heap_size = h->heap_size - 1;
	parent = 1;
	child = 2;
	while (child <= h->heap_size) {
		if ((child < h->heap_size) && (h->heap[child] < h->heap[child + 1]))	// 루트 노드의 자식 노드 중 오른쪽 자식(3번)이 크다면
			child++;	// 2->3
		if (temp >= h->heap[child]) break;		// 마지막 노드의 키값이 2 or 3번 노드의 키값보다 크다면 반복 연산 중단
		else {
			h->heap[parent] = h->heap[child];	// 루트노드에 2 or 3번 노드의 키값 삽입
			parent = child;						// 레벨 2의 노드를 부모 노드로 재설정
			child = child * 2;					// 레벨 3의 노드를 자식 노드로 재설정
		}
	}
	h->heap[parent] = temp;
	return item;
}

// 1차원 배열 히프의 내용을 출력하는 연산
void printHeap(heapType* h) {
	int i;
	printf("Heap: ");
	for (i = 1; i <= h->heap_size; i++)
		printf("[%d] ", h->heap[i]);
}

void main() {
	int i, n, item;
	heapType* heap = createHeap();
	insertHeap(heap, 10);
	insertHeap(heap, 45);
	insertHeap(heap, 19);
	insertHeap(heap, 11);
	insertHeap(heap, 96);

	printHeap(heap);

	n = heap->heap_size;
	for (i = 1; i <= n; i++) {
		item = deleteHeap(heap);
		printf("\n delete : [%d] ", item);
	}

	getchar();
}
