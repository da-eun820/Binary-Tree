#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

typedef char element;
typedef struct treeNode {
	char key;
	struct treeNode* left;
	struct treeNode* right;
}treeNode;

// 이진 탐색 트리에서 키값이 x인 노드의 위치를 탐색하는 연산
treeNode* searchBST(treeNode* root, char x) {
	treeNode* p;
	p = root;
	while (p != NULL) {
		if (x == p->key) return p;
		else if (x > p->key) p = p->right;
		else p = p->left;
	}
	printf("\n 찾는 key 값이 없습니다! \n");
	return p;
}

// 포인터 p가 가리키는 노드와 비교하여 노드 x를 삽입하는 연산
treeNode* insertNode(treeNode* p, char x) {
	treeNode* newNode;
	if (p == NULL) {
		newNode = (treeNode*)malloc(sizeof(treeNode));
		newNode->key = x;
		newNode->left = NULL;
		newNode->right = NULL;
		return newNode;
	}
	else if (x < p->key) p->left = insertNode(p->left, x);	// 삽입 연산 중이므로 p->left가 비어있으면 insert하기
	else if (x > p->key) p->right = insertNode(p->right, x);
	else printf("\n 이미 같은 키가 있습니다! \n");
	return p;
}

// 루트 노드부터 탐색하여 키값과 같은 노드를 찾아 삭제하는 연산
void deleteNode(treeNode* root, element key) {
	treeNode* parent, * p, * succ, * succ_parent;
	treeNode* child;
	parent = NULL;
	p = root;
	while ((p != NULL) && (p->key != key)) {
		parent = p;
		if (key < p->key) p = p->left;
		else p = p->right;
	}

	// 삭제할 노드가 없는 경우
	if (p == NULL) {
		printf("\n 찾는 키가 이진 트리에 없습니다! ");
		return;
	}

	// 삭제할 노드가 단말 노드인 경우
	if ((p->left == NULL && p->right == NULL)) {
		if (parent != NULL) {
			if (parent->left == p) parent->left = NULL;
			else parent->right = NULL;
		}
		else root = NULL;
	}

	// 삭제할 노드가 자식 노드를 한 개 가진 경우
	else if ((p->left != NULL || p->right != NULL)) {
		if (parent->left = p) child = p->left;		// 부모 노드의 왼쪽 트리에 삭제할 노드가 있다면 자식 노드 중 작은 필드값인 p->left를
		else child = p->right;						// 오른쪽 트리에 있다면 큰 필드값인 p->right를 자식 노드로 


		if (parent != NULL) {
			if (parent->left == p) parent->left = child;	
			else parent->right = child;
		}
		else root = child;
	}

	// 삭제할 노드가 자식 노드를 두 개 가진 경우
	else {
		succ_parent = p;
		succ = p->left;					// 삭제할 노드의 왼쪽 트리에서 후계자 노드 탐색
		while (succ->right != NULL) {	// 왼쪽 트리에서 오른쪽 노드 방향으로 맨끝까지 반복, right가 공백인 후계자 노드(즉, succ->left)를 탐색
			succ_parent = succ;
			succ = succ->right;			// 현재 노드의 오른쪽 노드로 이동하며 key값이 가장 큰 노드를 후계자 노드로 탐색
		}
		if (succ_parent->left == succ)			// 후계자 노드가 부모 노드의 왼쪽에 자리한다면,
			succ_parent->left = succ->left;		// 후계자 부모 노드의 왼쪽에(현 후계자 노드 자리에) 후계자 노드의 자식 노드를 연결
		else succ_parent->right = succ->left;	// 098행에서 right가 공백인 후계자 노드를 찾았으므로 자식 노드는 [succ->left]임
		p->key = succ->key;						// 삭제할 노드 p 자리에 후계자 노드 succ의 데이터 필드값(succ->key) 삽입
		p = succ;								// 포인터 p를 후계자 노드 succ에 설정
	}
	free(p);								// 포인터 p의 메모리 해제 = 후계자 노드 삭제
}

// 이진 탐색 트리를 중위 순회하면서 출력하는 연산
void displayInorder(treeNode* root) {
	if (root) {
		displayInorder(root->left);
		printf("%c_", root->key);
		displayInorder(root->right);
	}
}

void menu() {
	printf("\n*------------------------*");
	printf("\n\t1: 트리 출력");
	printf("\n\t2: 문자 삽입");
	printf("\n\t3: 문자 삭제");
	printf("\n\t4: 문자 검색");
	printf("\n\t5: 종료");
	printf("\n*------------------------*");
	printf("\n메뉴 입력 >> ");
}

void main() {
	treeNode* root = NULL;
	treeNode* foundedNode = NULL;
	char choice, key;

	// p362, [그림 7-43] 과 같은 초기 이진 탐색 트리 구성
	// 노드 G를 루트 노드 포인터 root로 지정
	root = insertNode(root, 'G');
	insertNode(root, 'I');
	insertNode(root, 'H');
	insertNode(root, 'D');
	insertNode(root, 'B');
	insertNode(root, 'M');
	insertNode(root, 'N');
	insertNode(root, 'A');
	insertNode(root, 'J');
	insertNode(root, 'Q');
	insertNode(root, 'E');

	while (1) {
		menu();
		scanf(" %c", &choice);

		switch (choice - '0') {		// 입력 받는 choice가 문자 값이므로 문자 '0'을 빼서 숫자 값으로 변환
		case 1: printf("\t[이진 트리 출력] ");
			displayInorder(root); printf("\n");
			break;

		case 2: printf("삽입할 문자를 입력하세요 : ");
			scanf(" %c", &key);
			insertNode(root, key);
			break;

		case 3: printf("삭제할 문자를 입력하세요 : ");
			scanf(" %c", &key);
			deleteNode(root, key);
			break;

		case 4: printf("찾을 문자를 입력하세요 : ");
			scanf(" %c", &key);
			foundedNode = searchBST(root, key);
			if (foundedNode != NULL)
				printf("\n %c를 찾았습니다! \n", foundedNode->key);
			else printf("\n 문자를 찾지 못했습니다. \n");
			break;

		case 5: return 0;

		default: printf("없는 메뉴입니다. 메뉴를 다시 선택하세요! \n");
			break;
		}
	}
}
